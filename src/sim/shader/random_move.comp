#version 460

layout (local_size_x = 1) in;

struct EntityDescriptor {
    vec4 color; // Offset: 0-15
    uvec4 randState; // Offset 16-31
    vec2 pos; // Offset: 32-39
    vec2 target; // Offset: 40-47
    vec2 direction; // Offset: 48-55
    uint roadIndex; // Offset: 56-59
    bool initialized; // Offset: 60-63
}; // Size will be rounded up to the next multiple of the largest member (vec4) -> 64 Bytes

struct CoordinateDescriptor {
    vec2 pos;
    uint connectedIndex;
    uint connectedCount;
};

struct RoadDescriptor {
    CoordinateDescriptor start;
    CoordinateDescriptor end;
};

layout(push_constant) uniform PushConstants {
	float worldSizeX;
	float worldSizeY;
} pushConsts;

layout(set = 0, binding = 0) buffer bufEntity { EntityDescriptor entities[]; };

layout(set = 0, binding = 1, std430) buffer readonly bufConnections { uint connections[]; };
layout(set = 0, binding = 2, std430) buffer readonly bufRoads { RoadDescriptor roads[]; };

precision highp float;
precision highp int;

// ------------------------------------------------------------------------------------
// 128 Bit XOR-Shift
// Source: https://en.wikipedia.org/wiki/Xorshift
// ------------------------------------------------------------------------------------
uint next(inout uvec4 state) {
	uint t = state.w;
    uint s = state.x;
	state.w = state.z;
	state.z = state.y;
	state.y = s;

	t ^= t << 11;
	t ^= t >> 8;
    state.x = t ^ s ^ (s >> 19);
	return state.x;
}

float next_float(inout uvec4 state) {
    // Division from: https://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/
    return float(next(state)) * (1.0 / 4294967296.0);
}

uint next(inout uvec4 state, uint min, uint max) {
    return uint(round(float(min) + (next_float(state) * float(max - min))));
}

// ------------------------------------------------------------------------------------

float SPEED = 1.4;

bool check_collision(uint index) {
    bool collision = false;
    if(entities[index].pos.x > pushConsts.worldSizeX) {
        entities[index].pos.x = pushConsts.worldSizeX;
        entities[index].direction = reflect(entities[index].direction, vec2(1, 0));
        collision = true;
    }
    else if(entities[index].pos.x < 0) {
        entities[index].pos.x = 0;
        entities[index].direction = reflect(entities[index].direction, vec2(1, 0));
        collision = true;
    }

    if(entities[index].pos.y > pushConsts.worldSizeY) {
        entities[index].pos.y = pushConsts.worldSizeY;
        entities[index].direction = reflect(entities[index].direction, vec2(0, 1));
        collision = true;
    }
    else if(entities[index].pos.y < 0) {
        entities[index].pos.y = 0;
        entities[index].direction = reflect(entities[index].direction, vec2(0, 1));
        collision = true;
    }
    return collision;
}

void new_target(uint index) {
    // Get current road:
    RoadDescriptor curRoad = roads[entities[index].roadIndex];
    CoordinateDescriptor curCoord;
    // Get current coordinate:
    if(entities[index].target == curRoad.start.pos) {
        curCoord = curRoad.start;
        // Just turn around in case there are no other connected roads:
        if(curCoord.connectedCount <= 1) {
            entities[index].target = curRoad.end.pos;
            return;
        }
    }
    else {
        curCoord = curRoad.end;
        // Just turn around in case there are no other connected roads:
        if(curCoord.connectedCount <= 1) {
            entities[index].target = curRoad.start.pos;
            return;
        }
    }

    uint newRoadIndex = -1;
    // Only one alternative available (besides our own road)? Select it immediately:
    if(curCoord.connectedCount == 2) {
        newRoadIndex = connections[curCoord.connectedIndex + 1];
    }
    else {
        // Skip our own road:
        uint newRoadOffset = next(entities[index].randState, 1, curCoord.connectedCount);
        newRoadIndex = connections[curCoord.connectedIndex + newRoadOffset];
    }

    // Update the new target:
    RoadDescriptor newRoad = roads[newRoadIndex];
    if(newRoad.start.pos == entities[index].target) {
        entities[index].target = newRoad.end.pos;
    }
    else {
        entities[index].target = newRoad.start.pos;
    }
    entities[index].roadIndex = newRoadIndex;

    // New random target:
    // float targetX = nextFloat(entities[index].randSeed, pushConsts.worldSizeX);
    // entities[index].randSeed = nextInt(entities[index].randSeed);
    // float targetY = nextFloat(entities[index].randSeed, pushConsts.worldSizeY);
    // entities[index].randSeed = nextInt(entities[index].randSeed);
    // entities[index].target = vec2(targetX, targetY);
}

void update_direction(uint index) {
    vec2 dist = entities[index].target - entities[index].pos;
    float len = length(dist);
    if(len == 0) {
        entities[index].direction = vec2(0);
        return;
    }
    vec2 normVec = dist / vec2(len);
    entities[index].direction = normVec * SPEED;
}

void move(uint index) {
    float dist = distance(entities[index].pos, entities[index].target);

    if(dist > SPEED) {
        entities[index].pos += entities[index].direction;
    }
    else {
        entities[index].pos = entities[index].target;
        new_target(index);
        update_direction(index);
    }
}

// void set_random_color(uint index) {
//     int seed = entities[index].randSeed;
//     entities[index].color.r = entities[index].pos.x / pushConsts.worldSizeX;
//     seed = nextInt(seed);
//     entities[index].color.g = entities[index].pos.y / pushConsts.worldSizeY;
//     seed = nextInt(seed);
//     entities[index].color.b = 0.0;
//     entities[index].randSeed = nextInt(seed);
// }

void main() {
    uint index = gl_GlobalInvocationID.x;

    // entities[index].pos = vec2(next(entities[index].randState, 1, 2), next(entities[index].randState, 1, 3));
    // return;

    if(!entities[index].initialized) {
        entities[index].initialized = true;
    }

    update_direction(index);
    move(index);
    if(check_collision(index)) {
        // set_random_color(index);
    }
}
