#version 450

layout (local_size_x = 1) in;

struct EntityDescriptor {
    vec3 color;
    float padding1;
    vec2 pos;
    vec2 target;
    vec2 direction;
    int randSeed;
    bool initialized;
    vec4 padding2; // Make sure we are alligned to 64 bytes like the original entity
};

layout(push_constant) uniform PushConstants {
	float worldSizeX;
	float worldSizeY;
} pushConsts;

layout(set = 0, binding = 0) buffer bufEntity { EntityDescriptor entities[]; };

precision highp float;

// ------------------------------------------------------------------------------------
// XOR-Shift
// Source: https://www.shadertoy.com/view/tsf3Dn
// ------------------------------------------------------------------------------------
int MIN = -2147483648;
int MAX = 2147483647;

int xorshift(int value) {
    // Xorshift*32
    // Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper
    value ^= value << 13;
    value ^= value >> 17;
    value ^= value << 5;
    return value;
}

int nextInt(int seed) {
    return xorshift(seed);
}

float nextFloat(int seed) {
    seed = xorshift(seed);
    // FIXME: This should have been a seed mapped from MIN..MAX to 0..1 instead
    return abs(fract(float(seed) / 3141.592653));
}

float nextFloat(int seed, float maxValue) {
    return nextFloat(seed) * maxValue;
}

// ------------------------------------------------------------------------------------

float SPEED = 1.4;

bool check_collision(uint index) {
    bool collision = false;
    if(entities[index].pos.x > pushConsts.worldSizeX) {
        entities[index].pos.x = pushConsts.worldSizeX;
        entities[index].direction = reflect(entities[index].direction, vec2(1, 0));
        collision = true;
    }
    else if(entities[index].pos.x < 0) {
        entities[index].pos.x = 0;
        entities[index].direction = reflect(entities[index].direction, vec2(1, 0));
        collision = true;
    }

    if(entities[index].pos.y > pushConsts.worldSizeY) {
        entities[index].pos.y = pushConsts.worldSizeY;
        entities[index].direction = reflect(entities[index].direction, vec2(0, 1));
        collision = true;
    }
    else if(entities[index].pos.y < 0) {
        entities[index].pos.y = 0;
        entities[index].direction = reflect(entities[index].direction, vec2(0, 1));
        collision = true;
    }
    return collision;
}

void new_target(uint index) {
    // New random target:
    float targetX = nextFloat(entities[index].randSeed, pushConsts.worldSizeX);
    entities[index].randSeed = nextInt(entities[index].randSeed);
    float targetY = nextFloat(entities[index].randSeed, pushConsts.worldSizeY);
    entities[index].randSeed = nextInt(entities[index].randSeed);
    entities[index].target = vec2(targetX, targetY);
}

void update_direction(uint index) {
    vec2 dist = entities[index].target - entities[index].pos;
    float len = length(dist);
    if(len == 0) {
        entities[index].direction = vec2(0);
        return;
    }
    vec2 normVec = dist / vec2(len);
    entities[index].direction = normVec * SPEED;
}

void move(uint index) {
    float dist = distance(entities[index].pos, entities[index].target);

    if(dist > SPEED) {
        entities[index].pos += entities[index].direction;
    }
    else {
        entities[index].pos = entities[index].target;
        new_target(index);
        update_direction(index);
    }
}

// void set_random_color(uint index) {
//     int seed = entities[index].randSeed;
//     entities[index].color.r = entities[index].pos.x / pushConsts.worldSizeX;
//     seed = nextInt(seed);
//     entities[index].color.g = entities[index].pos.y / pushConsts.worldSizeY;
//     seed = nextInt(seed);
//     entities[index].color.b = 0.0;
//     entities[index].randSeed = nextInt(seed);
// }

void main() {
    uint index = gl_GlobalInvocationID.x;

    if(!entities[index].initialized) {
        entities[index].initialized = true;
        new_target(index);
    }

    update_direction(index);
    move(index);
    if(check_collision(index)) {
        // set_random_color(index);
    }
}
