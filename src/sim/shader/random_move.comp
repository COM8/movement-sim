#version 460

layout (local_size_x = 1) in;

struct EntityDescriptor {
    vec4 color; // Offset: 0-15
    uvec4 randState; // Offset 16-31
    vec2 pos; // Offset: 32-39
    vec2 target; // Offset: 40-47
    vec2 direction; // Offset: 48-55
    uint roadIndex; // Offset: 56-59
    uint initialized; // Offset: 60-63
}; // Size will be rounded up to the next multiple of the largest member (vec4) -> 64 Bytes

struct CoordinateDescriptor {
    vec2 pos;
    uint connectedIndex;
    uint connectedCount;
};

struct RoadDescriptor {
    CoordinateDescriptor start;
    CoordinateDescriptor end;
};

layout(push_constant) uniform PushConstants {
	float worldSizeX;
	float worldSizeY;

	uint levelCount;
	uint maxDepth;
    uint entityLevelCap;
} pushConsts;

layout(set = 0, binding = 0) buffer bufEntity { EntityDescriptor entities[]; };

layout(set = 0, binding = 1, std430) buffer readonly bufConnections { uint connections[]; };
layout(set = 0, binding = 2, std430) buffer readonly bufRoads { RoadDescriptor roads[]; };

precision highp float;
precision highp int;

// ------------------------------------------------------------------------------------
// Quad Tree
// ------------------------------------------------------------------------------------
uint TYPE_INVALID = 0;
uint TYPE_LEVEL = 1;
uint TYPE_ENTITY = 2;

struct QuadTreeLevelDescriptor {
    int acquireLock;
    int writeLock;
    int readerLock;

    float offsetX;
    float offsetY;
    float width;
    float height;

    uint contentType;
    uint entityCount;
    uint first;

    uint prevLevelIndex;

    uint nextTL;
    uint nextTR;
    uint nextBL;
    uint nextBR;

    uint padding;
};

struct QuadTreeEntityDescriptor {
    uint levelIndex;

    uint typeNext;
    uint next;

    uint typePrev;
    uint prev;
};

// TODO add memory qualifiers: https://www.khronos.org/opengl/wiki/Shader_Storage_Buffer_Object
layout(set = 0, binding = 3, std430) buffer bufQuadTreeLevels { QuadTreeLevelDescriptor quadTreeLevels[]; };
layout(set = 0, binding = 4, std430) buffer bufQuadTreeEntities { QuadTreeEntityDescriptor quadTreeEntities[]; };
/**
 * [0]: Lock
 * [1]: Next free hint
 * [2... (levelCount + 2)]: Level locks
 **/
layout(set = 0, binding = 5, std430) buffer bufQuadTreeLevelStatus { uint quadTreeLevelUsedStatus[]; };

layout(set = 0, binding = 6, std430) buffer bufDebugData { uint debugData[]; };

void quad_tree_lock_level_read(uint levelIndex) {
    while(atomicCompSwap(quadTreeLevels[levelIndex].acquireLock, 0, 1) != 0) {}

    // Prevent from reading, when we are currently writing:
    while(quadTreeLevels[levelIndex].writeLock != 0) {}
    atomicAdd(quadTreeLevels[levelIndex].readerLock, 1);

    atomicExchange(quadTreeLevels[levelIndex].acquireLock, 0);
    memoryBarrierBuffer();
}

void quad_tree_unlock_level_read(uint levelIndex) {
    atomicAdd(quadTreeLevels[levelIndex].readerLock, -1);
    memoryBarrierBuffer();
}

/**
 * Locks read and write for the given levelIndex.
 **/
void quad_tree_lock_level_read_write(uint levelIndex) {
    while(atomicCompSwap(quadTreeLevels[levelIndex].acquireLock, 0, 1) != 0) {}

    // Wait until all others stopped reading:
    while(atomicCompSwap(quadTreeLevels[levelIndex].readerLock, 0, 1) != 0) {}
    while(atomicCompSwap(quadTreeLevels[levelIndex].writeLock, 0, 1) != 0) {}

    atomicExchange(quadTreeLevels[levelIndex].acquireLock, 0);
    memoryBarrierBuffer();
}

void quad_tree_unlock_level_write(uint levelIndex) {
    atomicExchange(quadTreeLevels[levelIndex].writeLock, 0);
    memoryBarrierBuffer();
}

void quad_tree_init_entity(uint index, uint typeNext, uint next, uint levelIndex) {
    quadTreeEntities[index].typeNext = typeNext;
    quadTreeEntities[index].next = next;
    quadTreeEntities[index].typePrev = TYPE_INVALID;
    quadTreeEntities[index].prev = 0;
    quadTreeEntities[index].levelIndex = levelIndex;
}

void quad_tree_append_entity(uint levelIndex, uint index) {
    if(quadTreeLevels[levelIndex].entityCount <= 0) {
        quadTreeLevels[levelIndex].first = index;
        quad_tree_init_entity(index, TYPE_INVALID, 0, levelIndex);
    }
    else {
        // Add in front:
        uint oldFirstIndex = quadTreeLevels[levelIndex].first;
        quad_tree_init_entity(index, TYPE_ENTITY, oldFirstIndex, levelIndex);

        quadTreeEntities[oldFirstIndex].typePrev = TYPE_ENTITY;
        quadTreeEntities[oldFirstIndex].prev = index;

        quadTreeLevels[levelIndex].first = index;
    }
    quadTreeLevels[levelIndex].entityCount++;
    memoryBarrierBuffer();
}

/**
 * Moves up the quad tree and unlocks all levels from reading again.
 **/
void quad_tree_unlock_levels_read(uint levelIndex) {
    while(quadTreeLevels[levelIndex].prevLevelIndex != levelIndex) {
        uint oldLevelIndex = levelIndex;
        levelIndex = quadTreeLevels[levelIndex].prevLevelIndex;
        quad_tree_unlock_level_read(oldLevelIndex);
    }
    // Unlock the first level:
    quad_tree_unlock_level_read(levelIndex);
}

uint quad_tree_get_free_level_index() {
    uint index = 0;
    uint i = quadTreeLevelUsedStatus[1];
    while(index <= 0) {
        if(quadTreeLevelUsedStatus[i] == 0) {
            quadTreeLevelUsedStatus[i] = 1;
            index = i - 2;
        }

        i++;
        if(i >= (pushConsts.levelCount + 2)) {
            i = 2;
        }
    }
    quadTreeLevelUsedStatus[1] = i;
    return index;
}

uvec4 quad_tree_get_free_level_indices() {
    uvec4 indices = uvec4(0);
    while(atomicCompSwap(quadTreeLevelUsedStatus[0], 0, 1) != 0) {}

    indices.x = quad_tree_get_free_level_index();
    indices.y = quad_tree_get_free_level_index();
    indices.z = quad_tree_get_free_level_index();
    indices.w = quad_tree_get_free_level_index();

    memoryBarrierBuffer();
    atomicExchange(quadTreeLevelUsedStatus[0], 0);

    return indices;
}

void quad_tree_free_level_indices(uvec4 indices) {
    while (atomicCompSwap(quadTreeLevelUsedStatus[0], 0, 1) != 0) {}

    quadTreeLevelUsedStatus[indices.x + 2] = 0;
    quadTreeLevelUsedStatus[indices.y + 2] = 0;
    quadTreeLevelUsedStatus[indices.z + 2] = 0;
    quadTreeLevelUsedStatus[indices.w + 2] = 0;

    quadTreeLevelUsedStatus[1] = indices.x + 2;

    memoryBarrierBuffer();
    atomicExchange(quadTreeLevelUsedStatus[0], 0);
}

void quad_tree_init_level(uint levelIndex, uint prevLevelIndex, float offsetX, float offsetY, float width, float height) {
    quadTreeLevels[levelIndex].acquireLock = 0;
    quadTreeLevels[levelIndex].writeLock = 0;
    quadTreeLevels[levelIndex].readerLock = 0;

    quadTreeLevels[levelIndex].offsetX = offsetX;
    quadTreeLevels[levelIndex].offsetY = offsetY;
    quadTreeLevels[levelIndex].width = width;
    quadTreeLevels[levelIndex].height = height;

    quadTreeLevels[levelIndex].prevLevelIndex = prevLevelIndex;
    quadTreeLevels[levelIndex].contentType = TYPE_ENTITY;
    quadTreeLevels[levelIndex].entityCount = 0;
}

void quad_tree_move_entities(uint levelIndex) {
    float offsetXNext = quadTreeLevels[levelIndex].offsetX + (quadTreeLevels[levelIndex].width / 2);
    float offsetYNext = quadTreeLevels[levelIndex].offsetY + (quadTreeLevels[levelIndex].height / 2);

    uint index = quadTreeLevels[levelIndex].first;
    quadTreeLevels[levelIndex].first = 0;
    quadTreeLevels[levelIndex].entityCount = 0;

    bool hasNext = false;
    do {
        uint nextIndex = quadTreeEntities[index].next;
        hasNext = quadTreeEntities[index].typeNext != TYPE_INVALID;
        quadTreeEntities[index].next = 0;
        quadTreeEntities[index].typeNext = TYPE_INVALID;

        vec2 ePos = entities[index].pos;

        uint newLevelIndex = 0;
        // Left:
        if(ePos.x < offsetXNext)  {
            // Top:
            if(ePos.y < offsetYNext) {
                newLevelIndex = quadTreeLevels[levelIndex].nextTL;
            }
            else {
                newLevelIndex = quadTreeLevels[levelIndex].nextBL;
            }
        }
        // Right:
        else {
            // Top:
            if(ePos.y < offsetYNext) {
                newLevelIndex = quadTreeLevels[levelIndex].nextTR;
            }
            else {
                newLevelIndex = quadTreeLevels[levelIndex].nextBR;
            }
        }
        quad_tree_append_entity(newLevelIndex, index);
        index = nextIndex;
    } while (hasNext);
}

void quad_tree_split_up_level(uint levelIndex) {
    quadTreeLevels[levelIndex].contentType = TYPE_LEVEL;

    uvec4 newLevelIndices = quad_tree_get_free_level_indices();

    float newWidth = quadTreeLevels[levelIndex].width / 2;
    float newHeight = quadTreeLevels[levelIndex].height / 2;

    quadTreeLevels[levelIndex].nextTL = newLevelIndices.x;
    quad_tree_init_level(quadTreeLevels[levelIndex].nextTL, levelIndex, quadTreeLevels[levelIndex].offsetX, quadTreeLevels[levelIndex].offsetY, newWidth, newHeight);
    quadTreeLevels[levelIndex].nextTR = newLevelIndices.y;
    quad_tree_init_level(quadTreeLevels[levelIndex].nextTR, levelIndex, quadTreeLevels[levelIndex].offsetX + newWidth, quadTreeLevels[levelIndex].offsetY, newWidth, newHeight);
    quadTreeLevels[levelIndex].nextBL = newLevelIndices.z;
    quad_tree_init_level(quadTreeLevels[levelIndex].nextBL, levelIndex, quadTreeLevels[levelIndex].offsetX, quadTreeLevels[levelIndex].offsetY + newHeight, newWidth, newHeight);
    quadTreeLevels[levelIndex].nextBR = newLevelIndices.w;
    quad_tree_init_level(quadTreeLevels[levelIndex].nextBR, levelIndex, quadTreeLevels[levelIndex].offsetX + newWidth, quadTreeLevels[levelIndex].offsetY + newHeight, newWidth, newHeight);

    quad_tree_move_entities(levelIndex);
    memoryBarrierBuffer();
}

bool quad_tree_same_pos_as_fist(uint levelIndex, vec2 ePos) {
    if(quadTreeLevels[levelIndex].entityCount > 0) {
        uint index = quadTreeLevels[levelIndex].first;
        return entities[index].pos == ePos;
    }
    return false;
}

void quad_tree_insert(uint index, uint startLevelIndex, uint startLevelDepth) {
    // Count the number of inserted items:
    atomicAdd(debugData[0], 1);

    vec2 ePos = entities[index].pos;
    uint curDepth = startLevelDepth;

    uint levelIndex = startLevelIndex;
    while (true) {
        quad_tree_lock_level_read(levelIndex);
        float offsetXNext = quadTreeLevels[levelIndex].offsetX + (quadTreeLevels[levelIndex].width / 2);
        float offsetYNext = quadTreeLevels[levelIndex].offsetY + (quadTreeLevels[levelIndex].height / 2);

        // Go one level deeper:
        if (quadTreeLevels[levelIndex].contentType == TYPE_LEVEL) {
            // Left:
            if (ePos.x < offsetXNext) {
                // Top:
                if (ePos.y < offsetYNext) {
                    levelIndex = quadTreeLevels[levelIndex].nextTL;
                } else {
                    levelIndex = quadTreeLevels[levelIndex].nextBL;
                }
            }
            // Right:
            else {
                // Top:
                if (ePos.y < offsetYNext) {
                    levelIndex = quadTreeLevels[levelIndex].nextTR;
                } else {
                    levelIndex = quadTreeLevels[levelIndex].nextBR;
                }
            }
            curDepth += 1;
        } else {
            // Prevent a deadlock:
            quad_tree_unlock_level_read(levelIndex);
            quad_tree_lock_level_read_write(levelIndex);

            // Check if something has changed in the meantime with the level. Retry...
            if (quadTreeLevels[levelIndex].contentType == TYPE_LEVEL) {
                quad_tree_unlock_level_write(levelIndex);
                quad_tree_unlock_level_read(levelIndex);
            } else {
                // Insert the entity in case there is space left, we can't go deeper or the entity has the same pos as the last:
                if (quadTreeLevels[levelIndex].entityCount < pushConsts.entityLevelCap || curDepth >= pushConsts.maxDepth || quad_tree_same_pos_as_fist(levelIndex, ePos)) {
                    quad_tree_append_entity(levelIndex, index);
                    memoryBarrierBuffer();
                    quad_tree_unlock_level_write(levelIndex);
                    break;
                }
                // Split up
                memoryBarrierBuffer();
                quad_tree_split_up_level(levelIndex);
                quad_tree_unlock_level_write(levelIndex);
                quad_tree_unlock_level_read(levelIndex);
            }
        }
        memoryBarrierBuffer();  // Ensure everything is in sync
    }
    // Unlock all levels again:
    quad_tree_unlock_levels_read(levelIndex);
}

bool quad_tree_is_entity_on_level(uint index, uint levelIndex) {
    return entities[index].pos.x >= quadTreeLevels[levelIndex].offsetX && entities[index].pos.x < (quadTreeLevels[levelIndex].offsetX + quadTreeLevels[levelIndex].width)
        && entities[index].pos.y >= quadTreeLevels[levelIndex].offsetY && entities[index].pos.y < (quadTreeLevels[levelIndex].offsetY + quadTreeLevels[levelIndex].height);
}

/**
 * Moves down the quad tree and locks all levels as read, except the last level, which gets locked as write so we can edit it.
 **/
uint quad_tree_lock_for_entity_edit(uint index) {
    vec2 ePos = entities[index].pos;
    uint levelIndex = 0;
    while (true) {
        quad_tree_lock_level_read(levelIndex);
        float offsetXNext = quadTreeLevels[levelIndex].offsetX + (quadTreeLevels[levelIndex].width / 2);
        float offsetYNext = quadTreeLevels[levelIndex].offsetY + (quadTreeLevels[levelIndex].height / 2);

        // Go one level deeper:
        if (quadTreeLevels[levelIndex].contentType == TYPE_LEVEL) {
            // Left:
            if (ePos.x < offsetXNext) {
                // Top:
                if (ePos.y < offsetYNext) {
                    levelIndex = quadTreeLevels[levelIndex].nextTL;
                } else {
                    levelIndex = quadTreeLevels[levelIndex].nextBL;
                }
            }
            // Right:
            else {
                // Top:
                if (ePos.y < offsetYNext) {
                    levelIndex = quadTreeLevels[levelIndex].nextTR;
                } else {
                    levelIndex = quadTreeLevels[levelIndex].nextBR;
                }
            }
        } else {
            // Prevent a deadlock:
            quad_tree_unlock_level_read(levelIndex);
            quad_tree_lock_level_read_write(levelIndex);

            // Check if something has changed in the meantime with the level. Retry...
            if (quadTreeLevels[levelIndex].contentType == TYPE_LEVEL) {
                quad_tree_unlock_level_write(levelIndex);
                quad_tree_unlock_level_read(levelIndex);
            } else {
                return levelIndex;
            }
        }
    }
}

/**
 * Removes the given entity from its level.
 * Returns true in case it was the last entity on this level.
 **/
bool quad_tree_remove_entity(uint index) {
    uint levelIndex = quadTreeEntities[index].levelIndex;
    if (quadTreeLevels[levelIndex].entityCount <= 1) {
        quadTreeLevels[levelIndex].first = 0;
        quadTreeLevels[levelIndex].entityCount = 0;
        return true;
    }

    if (quadTreeLevels[levelIndex].first == index) {
        quadTreeLevels[levelIndex].first = quadTreeEntities[index].next;
    }

    if (quadTreeEntities[index].typePrev == TYPE_ENTITY) {
        uint prevIndex = quadTreeEntities[index].prev;
        quadTreeEntities[prevIndex].next = quadTreeEntities[index].next;
        quadTreeEntities[prevIndex].typeNext = quadTreeEntities[index].typeNext;
    }

    if (quadTreeEntities[index].typeNext == TYPE_ENTITY) {
        uint nextIndex = quadTreeEntities[index].next;
        quadTreeEntities[nextIndex].prev = quadTreeEntities[index].prev;
        quadTreeEntities[nextIndex].typePrev = quadTreeEntities[index].typePrev;
    }
    quadTreeEntities[index].typePrev = TYPE_INVALID;
    quadTreeEntities[index].typeNext = TYPE_INVALID;
    quadTreeLevels[levelIndex].entityCount -= 1;

    return false;
}

bool quad_tree_is_level_empty(uint levelIndex) {
    return quadTreeLevels[levelIndex].entityCount <= 0 && quadTreeLevels[levelIndex].contentType == TYPE_ENTITY;
}

bool quad_tree_try_merging_sublevel(uint levelIndex) {
    if (quadTreeLevels[levelIndex].contentType != TYPE_LEVEL) {
        return false;
    }

    if (quad_tree_is_level_empty(quadTreeLevels[levelIndex].nextTL) && quad_tree_is_level_empty(quadTreeLevels[levelIndex].nextTR) && quad_tree_is_level_empty(quadTreeLevels[levelIndex].nextBL) && quad_tree_is_level_empty(quadTreeLevels[levelIndex].nextBR)) {
        quad_tree_free_level_indices(uvec4(quadTreeLevels[levelIndex].nextTL, quadTreeLevels[levelIndex].nextTR, quadTreeLevels[levelIndex].nextBL, quadTreeLevels[levelIndex].nextBR));
        quadTreeLevels[levelIndex].contentType = TYPE_ENTITY;
        return true;
    }
    return false;
}

uint quad_tree_get_cur_depth(uint levelIndex) {
    uint depth = 1;
    while (quadTreeLevels[levelIndex].prevLevelIndex != levelIndex) {
        levelIndex = quadTreeLevels[levelIndex].prevLevelIndex;
        depth++;
    }
    return depth;
}

void quad_tree_update(uint index, vec2 newPos) {
    while (true) {
        uint oldLevelIndex = quadTreeEntities[index].levelIndex;
        quad_tree_lock_level_read(oldLevelIndex);
        // Make sure our entity is still on the same level when we finally get the lock.
        // Could happen in case the current level got split up in the meantime.
        if (oldLevelIndex == quadTreeEntities[index].levelIndex) {
            break;
        }
        quad_tree_unlock_level_read(oldLevelIndex);
    }

    // Still on the same level, so we do not need to do anything:
    if (quad_tree_is_entity_on_level(index, quadTreeEntities[index].levelIndex)) {
        entities[index].pos = newPos;
        quad_tree_unlock_level_read(quadTreeEntities[index].levelIndex);
        return;
    }

    uint levelIndex = quadTreeEntities[index].levelIndex;
    quad_tree_unlock_level_read(levelIndex);
    levelIndex = quad_tree_lock_for_entity_edit(index);
    if (quad_tree_remove_entity(index)) {
        // Try merging levels:
        while (levelIndex != quadTreeLevels[levelIndex].prevLevelIndex) {
            quad_tree_unlock_level_write(levelIndex);
            quad_tree_unlock_level_read(levelIndex);
            levelIndex = quadTreeLevels[levelIndex].prevLevelIndex;

            // Prevent deadlocks:
            quad_tree_unlock_level_read(levelIndex);
            quad_tree_lock_level_read_write(levelIndex);

            if (!quad_tree_try_merging_sublevel(levelIndex)) {
                break;
            }
        }
    }
    quad_tree_unlock_level_write(levelIndex);

    // Update the removed entity position:
    entities[index].pos = newPos;

    // Move up until we reach a level where our entity is on:
    while (!quad_tree_is_entity_on_level(index, levelIndex)) {
        uint oldLevelIndex = levelIndex;
        levelIndex = quadTreeLevels[levelIndex].prevLevelIndex;
        quad_tree_unlock_level_read(oldLevelIndex);
    }

    // Insert the entity again:
    quad_tree_unlock_level_read(levelIndex);
    quad_tree_insert(index, levelIndex, quad_tree_get_cur_depth(levelIndex));
}

// ------------------------------------------------------------------------------------
// 128 Bit XOR-Shift
// Source: https://en.wikipedia.org/wiki/Xorshift
// ------------------------------------------------------------------------------------
uint next(inout uvec4 state) {
	uint t = state.w;
    uint s = state.x;
	state.w = state.z;
	state.z = state.y;
	state.y = s;

	t ^= t << 11;
	t ^= t >> 8;
    state.x = t ^ s ^ (s >> 19);
	return state.x;
}

float next_float(inout uvec4 state) {
    // Division from: https://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/
    return float(next(state)) * (1.0 / 4294967296.0);
}

uint next(inout uvec4 state, uint min, uint max) {
    return uint(round(float(min) + (next_float(state) * float(max - min))));
}

// ------------------------------------------------------------------------------------

float SPEED = 1.4;

bool check_collision(uint index) {
    bool collision = false;
    if(entities[index].pos.x > pushConsts.worldSizeX) {
        entities[index].pos.x = pushConsts.worldSizeX;
        entities[index].direction = reflect(entities[index].direction, vec2(1, 0));
        collision = true;
    }
    else if(entities[index].pos.x < 0) {
        entities[index].pos.x = 0;
        entities[index].direction = reflect(entities[index].direction, vec2(1, 0));
        collision = true;
    }

    if(entities[index].pos.y > pushConsts.worldSizeY) {
        entities[index].pos.y = pushConsts.worldSizeY;
        entities[index].direction = reflect(entities[index].direction, vec2(0, 1));
        collision = true;
    }
    else if(entities[index].pos.y < 0) {
        entities[index].pos.y = 0;
        entities[index].direction = reflect(entities[index].direction, vec2(0, 1));
        collision = true;
    }
    return collision;
}

void new_target(uint index) {
    // Get current road:
    RoadDescriptor curRoad = roads[entities[index].roadIndex];
    CoordinateDescriptor curCoord;
    // Get current coordinate:
    if(entities[index].target == curRoad.start.pos) {
        curCoord = curRoad.start;
        // Just turn around in case there are no other connected roads:
        if(curCoord.connectedCount <= 1) {
            entities[index].target = curRoad.end.pos;
            return;
        }
    }
    else {
        curCoord = curRoad.end;
        // Just turn around in case there are no other connected roads:
        if(curCoord.connectedCount <= 1) {
            entities[index].target = curRoad.start.pos;
            return;
        }
    }

    uint newRoadIndex = -1;
    // Only one alternative available (besides our own road)? Select it immediately:
    if(curCoord.connectedCount == 2) {
        newRoadIndex = connections[curCoord.connectedIndex + 1];
    }
    else {
        // Skip our own road:
        uint newRoadOffset = next(entities[index].randState, 1, curCoord.connectedCount);
        newRoadIndex = connections[curCoord.connectedIndex + newRoadOffset];
    }

    // Update the new target:
    RoadDescriptor newRoad = roads[newRoadIndex];
    if(newRoad.start.pos == entities[index].target) {
        entities[index].target = newRoad.end.pos;
    }
    else {
        entities[index].target = newRoad.start.pos;
    }
    entities[index].roadIndex = newRoadIndex;

    // New random target:
    // float targetX = nextFloat(entities[index].randSeed, pushConsts.worldSizeX);
    // entities[index].randSeed = nextInt(entities[index].randSeed);
    // float targetY = nextFloat(entities[index].randSeed, pushConsts.worldSizeY);
    // entities[index].randSeed = nextInt(entities[index].randSeed);
    // entities[index].target = vec2(targetX, targetY);
}

void update_direction(uint index, vec2 pos) {
    vec2 dist = entities[index].target - pos;
    float len = length(dist);
    if(len == 0) {
        entities[index].direction = vec2(0);
        return;
    }
    vec2 normVec = dist / vec2(len);
    entities[index].direction = normVec * SPEED;
}

vec2 move(uint index) {
    float dist = distance(entities[index].pos, entities[index].target);

    if(dist > SPEED) {
        return entities[index].pos + entities[index].direction;
    }

    vec2 newPos = entities[index].target;
    new_target(index);
    update_direction(index, newPos);
    return newPos;
}

// void set_random_color(uint index) {
//     int seed = entities[index].randSeed;
//     entities[index].color.r = entities[index].pos.x / pushConsts.worldSizeX;
//     seed = nextInt(seed);
//     entities[index].color.g = entities[index].pos.y / pushConsts.worldSizeY;
//     seed = nextInt(seed);
//     entities[index].color.b = 0.0;
//     entities[index].randSeed = nextInt(seed);
// }

void main() {
    uint index = gl_GlobalInvocationID.x;
    if(index > 12500) {
        return;
    }

    if(entities[index].initialized == 0) {
        quad_tree_insert(index, 0, 1);
        entities[index].initialized = 1;
        return;
    }

    update_direction(index, entities[index].pos);
    vec2 newPos = move(index);
    quad_tree_update(index, newPos);
    if(check_collision(index)) {
        // set_random_color(index);
    }
}
