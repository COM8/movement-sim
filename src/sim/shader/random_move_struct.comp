#version 450

layout (local_size_x = 1) in;

struct EntityDescriptor {
    vec2 pos;
    vec2 direction;
    bool isValid;
};

layout(push_constant) uniform PushConstants {
	float worldSizeX;
	float worldSizeY;
} pushConsts;

layout(set = 0, binding = 0) buffer bufEntity { EntityDescriptor entities[]; };

// ------------------------------------------------------------------------------------
// XOR-Shift
// Source: https://www.shadertoy.com/view/tsf3Dn
// ------------------------------------------------------------------------------------
int MIN = -2147483648;
int MAX = 2147483647;

int xorshift(in int value) {
    // Xorshift*32
    // Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper
    value ^= value << 13;
    value ^= value >> 17;
    value ^= value << 5;
    return value;
}

int nextInt(inout int seed) {
    seed = xorshift(seed);
    return seed;
}

float nextFloat(inout int seed) {
    seed = xorshift(seed);
    // FIXME: This should have been a seed mapped from MIN..MAX to 0..1 instead
    return abs(fract(float(seed) / 3141.592653));
}

float nextFloat(inout int seed, in float max) {
    return nextFloat(seed) * max;
}

precision lowp float;

// ------------------------------------------------------------------------------------

void main() {
    uint index = gl_GlobalInvocationID.x;
    if(entities[index].isValid) {
        int rngSeed = int(entities[index].pos.x + entities[index].pos.y);

        entities[index].pos.x += nextFloat(rngSeed, 3);
        entities[index].pos.y += nextFloat(rngSeed, 3) + 1;
        // entities[index].pos = entities[index].pos.xy + entities[index].direction.xy;
        entities[index].pos = mod(entities[index].pos.xy, vec2(pushConsts.worldSizeX, pushConsts.worldSizeY));
    }
}